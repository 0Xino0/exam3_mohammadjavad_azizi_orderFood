// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6rE6XB7Jxf94aDppVmg3Nf
// Component: 90MprgbLVpCQ

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Button from "../../Button"; // plasmic-import: A4EgRLn3kFHW/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 6rE6XB7Jxf94aDppVmg3Nf/projectcss
import sty from "./PlasmicOrder.module.css"; // plasmic-import: 90MprgbLVpCQ/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: yolw0b2gvZAo/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: SmkW4n8nhK_B/icon

createPlasmicElementProxy;

export type PlasmicOrder__VariantMembers = {};
export type PlasmicOrder__VariantsArgs = {};
type VariantPropType = keyof PlasmicOrder__VariantsArgs;
export const PlasmicOrder__VariantProps = new Array<VariantPropType>();

export type PlasmicOrder__ArgsType = {
  currentItem?: any;
};
type ArgPropType = keyof PlasmicOrder__ArgsType;
export const PlasmicOrder__ArgProps = new Array<ArgPropType>("currentItem");

export type PlasmicOrder__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  وضعیت?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultOrderProps {
  currentItem?: any;
  className?: string;
}

const $$ = {};

function PlasmicOrder__RenderFunc(props: {
  variants: PlasmicOrder__VariantsArgs;
  args: PlasmicOrder__ArgsType;
  overrides: PlasmicOrder__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u062f\u0631 \u062d\u0627\u0644 \u0622\u0645\u0627\u062f\u0647 \u0633\u0627\u0632\u06cc"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__d9JQ3
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return ` آی دی کاربر : ${$props.currentItem.id}`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__fccfh
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return `نام مشتری : ${$props.currentItem.name}`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__giiEa
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return `نام غذا : ${$props.currentItem.food}`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___9UD6
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return `تعداد : ${$props.currentItem.number}`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          data-plasmic-name={"\u0648\u0636\u0639\u06cc\u062a"}
          data-plasmic-override={overrides.وضعیت}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.وضعیت
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return ` وضعیت : ${$state.status}`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        onClick={async event => {
          const $steps = {};

          $steps["httpPatch"] = true
            ? (() => {
                const actionArgs = {
                  dataOp: {
                    sourceId: "vHyqcPfaZpSXGKeQFyToxy",
                    opId: "6c557747-f6ba-470a-a370-6628acb61e45",
                    userArgs: {
                      body: [$props.currentItem.id]
                    },
                    cacheKey: null,
                    invalidatedKeys: ["plasmic_refresh_all"],
                    roleId: null
                  }
                };
                return (async ({ dataOp, continueOnError }) => {
                  try {
                    const response = await executePlasmicDataOp(dataOp, {
                      userAuthToken: dataSourcesCtx?.userAuthToken,
                      user: dataSourcesCtx?.user
                    });
                    await plasmicInvalidate(dataOp.invalidatedKeys);
                    return response;
                  } catch (e) {
                    if (!continueOnError) {
                      throw e;
                    }
                    return e;
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["httpPatch"] != null &&
            typeof $steps["httpPatch"] === "object" &&
            typeof $steps["httpPatch"].then === "function"
          ) {
            $steps["httpPatch"] = await $steps["httpPatch"];
          }

          $steps["updateStatus"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["status"]
                  },
                  operation: 0,
                  value: `وضعیت به آماده شده تغییر یافت`
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateStatus"] != null &&
            typeof $steps["updateStatus"] === "object" &&
            typeof $steps["updateStatus"].then === "function"
          ) {
            $steps["updateStatus"] = await $steps["updateStatus"];
          }
        }}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__scVyj
          )}
        >
          {"\u0622\u0645\u0627\u062f\u0647 \u0634\u062f"}
        </div>
      </Button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "\u0648\u0636\u0639\u06cc\u062a", "button"],
  freeBox: ["freeBox", "\u0648\u0636\u0639\u06cc\u062a"],
  وضعیت: ["\u0648\u0636\u0639\u06cc\u062a"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  وضعیت: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOrder__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOrder__VariantsArgs;
    args?: PlasmicOrder__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOrder__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicOrder__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOrder__ArgProps,
          internalVariantPropNames: PlasmicOrder__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOrder__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOrder";
  } else {
    func.displayName = `PlasmicOrder.${nodeName}`;
  }
  return func;
}

export const PlasmicOrder = Object.assign(
  // Top-level PlasmicOrder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    وضعیت: makeNodeComponent("\u0648\u0636\u0639\u06cc\u062a"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicOrder
    internalVariantProps: PlasmicOrder__VariantProps,
    internalArgProps: PlasmicOrder__ArgProps
  }
);

export default PlasmicOrder;
/* prettier-ignore-end */
